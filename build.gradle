plugins {
  id 'jacoco'
  id 'com.github.kt3k.coveralls' version '2.8.4'
  id 'com.github.spotbugs' version '2.0.0'
}

allprojects {
  apply plugin: 'maven'
  apply plugin: 'signing'
  apply plugin: 'jacoco'

  group = 'org.forgerock.cuppa'
  version = '1.4.0'

  repositories {
    mavenLocal()
    mavenCentral()
  }

  ext {
    coverageProjects = [':cuppa', ':cuppa-junit'].collect { project(it) }
  }
}

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
  ext.sonatypeUsername = ""
  ext.sonatypePassword = ""
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'com.github.spotbugs'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  configurations {
    provided
  }

  sourceSets {
    main {
      compileClasspath += configurations.provided
    }
    test {
      compileClasspath += configurations.provided
    }
  }

  javadoc {
    options.stylesheetFile = new File(rootDir, "docs/css/javadoc.css")
    classpath += configurations.provided
  }

  dependencies {
    testCompile (group: 'org.testng', name: 'testng', version:'6.9.9') {
      exclude module: 'junit'
    }
    testCompile group: 'org.assertj', name: 'assertj-core', version:'3.2.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version:'1.10.19'

    checkstyle 'com.puppycrawl.tools:checkstyle:6.15'
  }

  checkstyle {
    configFile = new File(rootDir, "config/checkstyle/checkstyle.xml")
    configProperties['samedir'] = new File(rootDir, "config/checkstyle")
  }

  test {
    classpath += configurations.provided
    useTestNG()
  }

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    archiveClassifier.set 'javadoc'
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set 'sources'
  }

  artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
  }

  signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom.project {
          name 'Cuppa'
          packaging 'jar'
          description 'Cuppa - A testing framework for Java 8'
          url 'http://cuppa.forgerock.org'

          scm {
            url 'https://github.com/cuppa-framework/cuppa'
            connection 'scm:git@github.com:cuppa-framework/cuppa.git'
            developerConnection 'scm:git@github.com:cuppa-framework/cuppa.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'phillcunnington'
              name 'Phill Cunnington'
            }
            developer {
              id 'joebandenburg'
              name 'Joe Bandenburg'
            }
          }
        }
      }
    }
  }
}

gradle.taskGraph.whenReady { taskGraph ->
  if (taskGraph.hasTask(uploadArchives)) {
    // Use Java 6's console to read from the console (no good for
    // a CI environment)
    Console console = System.console()
    if (!console) {
      logger.error "Could not get console. Are you running in daemon mode? Use --no-daemon"
    }
    console.printf "\n\nWe have to sign some things in this build." +
            "\n\nPlease enter your signing details.\n\n"

    def id = console.readLine("PGP Key Id: ")
    def file = console.readLine("PGP Secret Key Ring File (absolute path): ")
    def password = console.readPassword("PGP Private Key Password: ")

    allprojects { ext."signing.keyId" = id }
    allprojects { ext."signing.secretKeyRingFile" = file }
    allprojects { ext."signing.password" = password }

    console.printf "\nThanks.\n\n"
  }
}

coveralls {
  sourceDirs = files(coverageProjects.sourceSets.main.allSource.srcDirs).files.absolutePath
}

task jacocoRootReport(type: JacocoReport) {
  dependsOn = coverageProjects.jacocoTestReport
  sourceDirectories.from = files(coverageProjects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(coverageProjects.sourceSets.main.output)
  executionData.from = files(coverageProjects.jacocoTestReport.executionData)
  reports {
    xml {
      enabled true
      destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
  }
}
